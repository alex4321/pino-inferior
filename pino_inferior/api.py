# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/notest/08_api_methods.ipynb.

# %% auto 0
__all__ = ['TASK_STATUS_NOT_STARTED', 'TASK_STATUS_IN_PROGRESS', 'TASK_STATUS_FINISHED', 'TASK_STATUS_FAILED', 'app',
           'INTERMEDIATE_TASK_ID', 'User', 'UserWithStyle', 'MessageQuery', 'TaskResponse', 'CommentRequest',
           'api_comment_query', 'Post', 'ContextRequest', 'api_context_query', 'api_task_status',
           'ContextRequestWithTime', 'CommentRequestWithTime', 'TaskForExecution', 'api_tasks_for_execution',
           'task_status_set', 'LogRecord', 'task_get_log', 'task_post_log']

# %% ../nbs/notest/08_api_methods.ipynb 1
from datetime import datetime
from typing import List, Union, Dict
from .message import Message
from .models import aengine, APICommentQuery, APICommentQueryTaskMapping, APITask, \
    APIContextSummarizationQuery, APIContextSummarizationTaskMapping, APILog
from sqlalchemy.ext.asyncio import AsyncEngine, AsyncSession
from sqlalchemy import select
import pandas as pd
from pydantic.dataclasses import dataclass
from fastapi import FastAPI, HTTPException
from subprocess import Popen, STDOUT, PIPE
from threading import Thread
from time import sleep
from pydantic import TypeAdapter
import requests
from pino_inferior.context_extractor import build_context_extractor_chain, \
    PromptMarkupConfig as ContextExtractorPromptMarkupConfig, \
    LengthConfig as ContextExtractorPromptLengthConfig, \
    CONTEXT_INPUT_TEXT, CONTEXT_INPUT_POST_TIME, CONTEXT_INPUT_GOALS, \
    CONTEXT_INPUT_CURRENT_TIME, CONTEXT_INPUT_USERNAME, CONTEXT_INPUT_CHARACTER, \
    CONTEXT_OUTPUT_CONTEXT
from langchain.chat_models import ChatOpenAI
from .core import OPENAI_API_KEY, OPENAI_AGENT_MODEL, OPENAI_CONTEXT_MODEL, OPENAI_FALLACY_MODEL, \
    VECTOR_DB, VECTOR_DB_PARAMS, MEMORY_PARAMS
from .memory import Memory, INPUT_RETRIEVER_QUERY, OUTPUT_RETRIEVER_DOCUMENTS
import tiktoken
from traceback import format_exc
from .agent import TOOLS_PROMPTS_DIR, ToolDescription, RolePlayAgent, \
    PromptMarkupConfig as RPPromptMarkupConfig, \
    LengthConfig as RPLengthMarkupConfig, \
    AGENT_INPUT_TIME, AGENT_INPUT_CONTEXT, AGENT_INPUT_FALLACIES, AGENT_INPUT_HISTORY, AGENT_INPUT_TOOLS, \
    AGENT_INPUT_USERNAME, AGENT_INPUT_CHARACTER, AGENT_INPUT_GOAL, AGENT_INPUT_STYLE_EXAMPLES, \
    AGENT_INPUT_STYLE_DESCRIPTION
from .fallacy import build_fallacy_detection_chain, LengthConfig as FallacyLengthConfig, \
    read_fallacies, FALLACIES_FNAME, \
    INPUT_QUERY as INPUT_FALLACY_QUERY, OUTPUT_SHORT_ANSWER as OUTPUT_FALLACY_QUERY
import os
from langchain.embeddings import OpenAIEmbeddings

# %% ../nbs/notest/08_api_methods.ipynb 2
TASK_STATUS_NOT_STARTED = "not_started"
TASK_STATUS_IN_PROGRESS = "in_progress"
TASK_STATUS_FINISHED = "finished"
TASK_STATUS_FAILED = "failed"

# %% ../nbs/notest/08_api_methods.ipynb 3
app = FastAPI()

# %% ../nbs/notest/08_api_methods.ipynb 4
@dataclass
class User:
    name: str
    character: str
    goals: str


@dataclass
class UserWithStyle(User):
    style_example: str
    style_description: str


@dataclass
class MessageQuery:
    author: str
    time: str
    content: str


@dataclass
class TaskResponse:
    id: int
    status: str
    response: str


@dataclass
class CommentRequest:
    context: str
    history: List[MessageQuery]
    user: UserWithStyle

# %% ../nbs/notest/08_api_methods.ipynb 7
async def _comment_query(engine: AsyncEngine,
                         time: datetime,
                         context: str,
                         history: List[Message],
                         user_name: str,
                         user_character: str,
                         user_goals: str,
                         user_style_example: str,
                         user_style_description: str) -> TaskResponse:
    async with AsyncSession(engine) as session:
        async with session.begin():
            query = APICommentQuery(
                time=time,
                context=context,
                history=[
                    message.to_dict()
                    for message in history
                ],
                user_name=user_name,
                user_character=user_character,
                user_goals=user_goals,
                user_style_example=user_style_example,
                user_style_description=user_style_description,
            )
            session.add(query)
            task = APITask(
                status=TASK_STATUS_NOT_STARTED,
                response="",
                created_at=time,
                updated_at=time,
            )
            session.add(task)
            await session.flush()
            await session.refresh(query)
            await session.refresh(task)
            mapping = APICommentQueryTaskMapping(
                comment_id=query.query_id,
                task_id=task.task_id,
            )
            session.add(mapping)
            return TaskResponse(task.task_id, task.status, task.response)

# %% ../nbs/notest/08_api_methods.ipynb 8
@app.post("/comment")
async def api_comment_query(request: CommentRequest) -> TaskResponse:
    return await _comment_query(
        aengine,
        time=datetime.now(),
        context=request.context,
        history=[Message.from_dict(item.__dict__) for item in request.history],
        user_name=request.user.name,
        user_character=request.user.character,
        user_goals=request.user.goals,
        user_style_example=request.user.style_example,
        user_style_description=request.user.style_description,
    )

# %% ../nbs/notest/08_api_methods.ipynb 10
async def _context_query(engine: AsyncEngine,
                         time: datetime,
                         post_time: datetime,
                         text: str,
                         user_name: str,
                         user_character: str,
                         user_goals: str) -> TaskResponse:
    async with AsyncSession(engine) as session:
        async with session.begin():
            query = APIContextSummarizationQuery(
                text=text,
                time=time,
                post_time=post_time,
                user_name=user_name,
                user_character=user_character,
                user_goals=user_goals,
            )
            session.add(query)
            task = APITask(
                status=TASK_STATUS_NOT_STARTED,
                response="",
                created_at=time,
                updated_at=time,
            )
            session.add(task)
            await session.flush()
            await session.refresh(task)
            await session.refresh(query)
            mapping = APIContextSummarizationTaskMapping(
                context_id=query.query_id,
                task_id=task.task_id,
            )
            session.add(mapping)
            return TaskResponse(task.task_id, task.status, task.response)

# %% ../nbs/notest/08_api_methods.ipynb 11
@dataclass
class Post:
    text: str
    time: str


@dataclass
class ContextRequest:
    post: Post
    user: User

# %% ../nbs/notest/08_api_methods.ipynb 12
@app.post("/context")
async def api_context_query(request: ContextRequest) -> TaskResponse:
    return await _context_query(
        aengine,
        datetime.now(),
        pd.to_datetime(request.post.time),
        request.post.text,
        request.user.name,
        request.user.character,
        request.user.goals,
    )

# %% ../nbs/notest/08_api_methods.ipynb 14
@app.get("/task-status")
async def api_task_status(task_id: int) -> TaskResponse:
    async with AsyncSession(aengine) as session:
        async with session.begin():
            query = select(APITask).filter(APITask.task_id == task_id)
            query_result = await session.execute(query)
            task = query_result.scalar()
            if not task:
                raise HTTPException(404)
            return TaskResponse(
                task.task_id,
                task.status,
                task.response
            )

# %% ../nbs/notest/08_api_methods.ipynb 16
@dataclass
class ContextRequestWithTime(ContextRequest):
    time: str


@dataclass
class CommentRequestWithTime(CommentRequest):
    time: str


@dataclass
class TaskForExecution:
    task_id: int
    task_type: str
    task_objects: Dict[str, Union[ContextRequestWithTime, CommentRequestWithTime]]

# %% ../nbs/notest/08_api_methods.ipynb 17
@app.get("/tasks-for-execution")
async def api_tasks_for_execution(count: int) -> List[TaskForExecution]:
    async with AsyncSession(aengine) as session:
        async with session.begin():
            tasks_to_mark_query = select(APITask) \
                .filter(APITask.status == TASK_STATUS_NOT_STARTED) \
                .order_by(APITask.created_at) \
                .limit(count)
            tasks_to_mark_response = await session.execute(tasks_to_mark_query)
            tasks_to_mark = tasks_to_mark_response.scalars().all()
            for task in tasks_to_mark:
                task.status = TASK_STATUS_IN_PROGRESS
            task_ids = {
                task.task_id
                for task in tasks_to_mark
            }
            await session.commit()
        async with session.begin():
            result_tasks = []
            comment_query = select(APICommentQuery, APICommentQueryTaskMapping.task_id) \
                .join(APICommentQueryTaskMapping, APICommentQueryTaskMapping.comment_id == APICommentQuery.query_id) \
                .filter(APICommentQueryTaskMapping.task_id.in_(task_ids))
            comment_query_response = await session.execute(comment_query)
            comment_request: APICommentQuery
            task_id: int
            for comment_request, task_id in comment_query_response.all():
                result_tasks.append(TaskForExecution(
                    task_id=task_id,
                    task_type="comment",
                    task_objects={
                        "comment": CommentRequestWithTime(
                            context=comment_request.context,
                            history=comment_request.history,
                            user=UserWithStyle(
                                name=comment_request.user_name,
                                character=comment_request.user_character,
                                goals=comment_request.user_goals,
                                style_example=comment_request.user_style_example,
                                style_description=comment_request.user_style_description,
                            ),
                            time=str(comment_request.time),
                        )
                    }
                ))
            context_query = select(APIContextSummarizationQuery, APIContextSummarizationTaskMapping.task_id) \
                .join(APIContextSummarizationTaskMapping, APIContextSummarizationTaskMapping.context_id == APIContextSummarizationQuery.query_id) \
                .filter(APIContextSummarizationTaskMapping.task_id.in_(task_ids))
            context_query_response = await session.execute(context_query)
            context_request: APIContextSummarizationQuery
            task_id: int
            for context_request, task_id in context_query_response.all():
                result_tasks.append(TaskForExecution(
                    task_id=task_id,
                    task_type="context",
                    task_objects={
                        "context": ContextRequestWithTime(
                            post=Post(
                                text=context_request.text,
                                time=str(context_request.post_time),
                            ),
                            user=User(
                                name=context_request.user_name,
                                character=context_request.user_character,
                                goals=context_request.user_goals,
                            ),
                            time=str(context_request.time),
                        )
                    }
                ))
            return result_tasks

# %% ../nbs/notest/08_api_methods.ipynb 19
@app.post("/task-status-set")
async def task_status_set(request: List[TaskResponse]) -> None:
    async with AsyncSession(aengine) as session:
        async with session.begin():
            update_time = datetime.now()
            task_id2task = {
                task.id: task
                for task in request
            }
            tasks_to_mark_query = select(APITask) \
                .filter(APITask.task_id.in_(task_id2task.keys()))
            task_to_mark_query_response = await session.execute(tasks_to_mark_query)
            task: APITask
            for task, in task_to_mark_query_response.all():
                print("TASK CLASS", task.__class__)
                task.updated_at = update_time
                task.response = task_id2task[task.task_id].response
                task.status = task_id2task[task.task_id].status

# %% ../nbs/notest/08_api_methods.ipynb 21
@dataclass
class LogRecord:
    task_id: int
    time: str
    type: str
    subtask: str
    prompt: Union[str, None]
    token: Union[str, None]


@app.get("/task-log")
async def task_get_log(task_id: int, older_than: str) -> List[LogRecord]:
    if older_than:
        older_than_dt = pd.to_datetime(older_than)
    else:
        older_than_dt = None
    result = []
    async with AsyncSession(aengine) as session:
        async with session.begin():
            query =  select(APILog)\
                .filter(APILog.task_id==task_id)
            if older_than_dt:
                query = query.filter(APILog.time > older_than_dt)
            query = query.order_by(APILog.time.desc())
            query_response = await session.execute(query)
            log_record: APILog
            for log_record, in query_response.all():
                result.append(LogRecord(
                    task_id=log_record.task_id,
                    time=str(log_record.time),
                    type=log_record.type,
                    subtask=log_record.subtask,
                    prompt=log_record.prompt,
                    token=log_record.token,
                ))
    return result


@app.post("/task-log-add")
async def task_post_log(record: LogRecord) -> None:
    async with AsyncSession(aengine) as session:
        async with session.begin():
            log = APILog(
                task_id=record.task_id,
                time=pd.to_datetime(record.time),
                type=record.type,
                subtask=record.subtask,
                prompt=record.prompt,
                token=record.token
            )
            session.add(log)

# %% ../nbs/notest/08_api_methods.ipynb 25
INTERMEDIATE_TASK_ID = "task_id"
