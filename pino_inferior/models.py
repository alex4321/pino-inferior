# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_models.ipynb.

# %% auto 0
__all__ = ['aengine', 'Base', 'ParagraphMemoryRecord', 'APICommentQuery', 'APIContextSummarizationQuery', 'APITask',
           'APICommentQueryTaskMapping', 'APIContextSummarizationTaskMapping']

# %% ../nbs/03_models.ipynb 3
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, Text, String, JSON, DateTime, ForeignKey, UniqueConstraint, PrimaryKeyConstraint, \
    create_engine
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy.orm import relationship
from .core import SQLALCHEMY_CONNECTION_STRING

# %% ../nbs/03_models.ipynb 4
aengine = create_async_engine(url=SQLALCHEMY_CONNECTION_STRING)

# %% ../nbs/03_models.ipynb 5
Base = declarative_base()

# %% ../nbs/03_models.ipynb 6
class ParagraphMemoryRecord(Base):
    """
    Memory system operates on document paragraph level in SQL database and sentences in vector DB.
    So:
    1. query is converted to an embedding
    2. than vector DB finds most similar sentences
    3. than corresponding paragraph extracted from SQL database
    And vice versa for storing.
    This ORM entity related to the last entity (SQL database records regards paragraphs).
    """
    __tablename__ = "memory_records"
    id = Column(Integer, primary_key=True, autoincrement=True)
    text = Column(Text)
    meta = Column(JSON)
    md5 = Column(String(64))
    created_at = Column(DateTime)

    __table_args__ = (
        UniqueConstraint('md5', 'text', name='_md5_text_uc'),
    )

# %% ../nbs/03_models.ipynb 7
class APICommentQuery(Base):
    __tablename__ = "comment_query"
    query_id = Column(Integer, primary_key=True, autoincrement=True)
    
    time = Column(DateTime)
    context = Column(Text)
    history = Column(JSON)

    user_name = Column(Text)
    user_character = Column(Text)
    user_goals = Column(Text)
    user_style_example = Column(Text)
    user_style_description = Column(Text)
    #AGENT_INPUT_FALLACIES: read_fallacies(FALLACIES_FNAME),
    #AGENT_INPUT_TOOLS: [fallacy_tool, memory_tool,],
    

# %% ../nbs/03_models.ipynb 8
class APIContextSummarizationQuery(Base):
    __tablename__ = "context_summary_query"
    query_id = Column(Integer, primary_key=True, autoincrement=True)
    text = Column(Text)
    time = Column(DateTime)
    post_time = Column(DateTime)

    user_name = Column(Text)
    user_character = Column(Text)
    user_goals = Column(Text)

# %% ../nbs/03_models.ipynb 9
class APITask(Base):
    __tablename__ = "api_task"
    task_id = Column(Integer, primary_key=True, autoincrement=True)
    created_at = Column(DateTime)
    updated_at = Column(DateTime)
    status = Column(Integer)
    response = Column(Text)

# %% ../nbs/03_models.ipynb 10
class APICommentQueryTaskMapping(Base):
    __tablename__ = "api_comment_task"
    comment_id = Column(Integer, ForeignKey(f"{APICommentQuery.__tablename__}.query_id"))
    task_id = Column(Integer, ForeignKey(f"{APITask.__tablename__}.task_id"))

    __table_args__ = (
        PrimaryKeyConstraint(
            "comment_id",
            "task_id",
            name="pk_cid_tid"
        ),
        UniqueConstraint(
            "task_id",
            name="unique_tid",
        ),
    )

# %% ../nbs/03_models.ipynb 11
class APIContextSummarizationTaskMapping(Base):
    __tablename__ = "api_context_task"
    context_id = Column(Integer, ForeignKey(f"{APIContextSummarizationQuery.__tablename__}.query_id"))
    task_id = Column(Integer, ForeignKey(f"{APITask.__tablename__}.task_id"))
    
    __table_args__ = (
        PrimaryKeyConstraint(
            "context_id",
            "task_id",
            name="pk_cid_tid"
        ),
        UniqueConstraint(
            "task_id",
            name="unique_tid",
        ),
    )
